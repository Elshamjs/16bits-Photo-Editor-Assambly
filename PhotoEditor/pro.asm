IMP_TEXTO MACRO MSG
	DRAW_RECT_M 0D, 0D, 640D, 20D, 08H
	MOV AH, 02H
	MOV BH, 00H
	MOV DH, 0D
	MOV DL, 0D
	INT 10H
	MOV AH, 09H              ; SERVICIO DE IMPRESION
    LEA DX, MSG             ; OBTIENE LA DIRECCION DE MSG
    INT 21H                 ; INTERRUPCION 21H
ENDM

CLEAR_TEXT MACRO

	DRAW_RECT_M 0D, 0D, 640D, 30D, 08H
	MOV AH, 02H
	MOV BH, 00H
	MOV DH, 0D
	MOV DL, 0D
	
ENDM 


OPEN_FILE MACRO FILE_NAME, FILE_HANDLE

	MOV AH, 3DH 		;PETICION PARA ABRIR
	MOV AL, 02 			;LECTURA Y ESCRITURA
	MOV DX, OFFSET FILE_NAME 	 ;CADENA ASCIIZ
	INT 21H 			;LLAMA AL DOS
	MOV FILE_HANDLE, AX 		;GUARDA EL MANEJADOR EN UN PALABRA

ENDM

OPEN_FILE_PTR MACRO FILE_PTR, FILE_HANDLE

	MOV AH, 3DH 		;PETICION PARA ABRIR
	MOV AL, 02 			;LECTURA Y ESCRITURA
	MOV DX, FILE_PTR 	 ;CADENA ASCIIZ
	INT 21H 			;LLAMA AL DOS
	MOV FILE_HANDLE, AX 		;GUARDA EL MANEJADOR EN UN PALABRA

ENDM

SET_FILE_POSITION MACRO FILE_HANDLER, SEEK, SEEK_OFFSET_H, SEEK_OFFSET_L

MOV AH, 42H
MOV AL, SEEK
MOV BX, FILE_HANDLER
MOV CX, SEEK_OFFSET_H
MOV DX, SEEK_OFFSET_L
INT 21H

ENDM

CLOSE_FILE MACRO FILE_HANDLER

	MOV AH, 3EH			;PETICION PARA CERRAR
	MOV DX, FILE_HANDLER		;EL ARCHIVO
	INT 21H

ENDM

WRITE_TO_FILE MACRO FILE_HANDLER, WRITE_BUFFER

MOV AH, 40H
MOV BX, FILE_HANDLER
MOV CX, 01D
MOV DX, OFFSET WRITE_BUFFER
INT 21H

ENDM

READ_FROM_FILE MACRO FILE_HANDLER, BUFFER_FILE

	MOV AH, 3FH 		;PETICION DE LECTURA DE REGISTRO
	MOV BX, FILE_HANDLER 		;MANEJADOR DE ARVHIVOS
	MOV CX, 01D 		;CANTIDAD DE BYTES A LEER
	MOV DX, OFFSET BUFFER_FILE 		;DIRECCION DEL AREA DE ENTRADA
	INT 21H

ENDM


DRAW_RECT_M MACRO X, Y, WW, HH, C1 ;COLOR
	MOV AX, X
	MOV BX, Y
	MOV CX, WW
	MOV DX, HH
	MOV COORX, AX
	MOV COORY, BX
	MOV MAX_W, CX
	MOV MAX_H, DX
	MOV AH, C1
	MOV COLOR, AH
	CALL DRAW_RECT
ENDM

DRAW_IMG_M MACRO PATH, X, Y
	MOV AX, OFFSET PATH
	MOV PTR_PATH, AX	
	MOV AX, X
	MOV BX, Y
	MOV COORX, AX
	MOV COORY, BX
	CALL DRAW_IMG ;PTR_PATH, COORX, COORY
	
ENDM

PIX MACRO X, Y
	
	MOV CX, X ; COORDENADA X
	MOV DX, Y ; COORDENADA Y
	MOV BH, 0H ;HOJA
	MOV AH, 0CH ;21,0 DIBUJAR PIXEL
	INT 10H
	
ENDM

ON_CLICK_M MACRO X, Y, WW, HH
	
	MOV AX, X
	MOV COORX, AX
	MOV AX, Y
	MOV COORY, AX
	MOV AX, WW
	MOV MAX_W, AX
	MOV AX, HH
	MOV MAX_H, AX
	CALL ON_CLICK	
ENDM

LOAD_DUMMY_M MACRO FROM_IMG_PTR

	MOV AX, FROM_IMG_PTR
	MOV PTR_PATH, AX
	CALL LOAD_DUMMY

ENDM


.MODEL SMALL

.STACK 100H


.DATA
CONT_CHAR DW 0H
SAVE_PATH DB 13D DUP(0H)
CNT_X DW 0H
CNT_Y DW 0H
COORX DW 0H
COORY DW 0H
MST8 DB 'Imagen a color abierta!', '$'
MST9 DB 'Imagen a color blanco y negro abierta!', '$'
MST10 DB 'Primero abra una imagen, presione cargar imagen o cargue una predefinida.', '$'
MST11 DB 'Los colores de la imagen han sido invertidos!', '$'
MST13 DB 'Imagen Cargada!', '$'
MST14 DB 'La imagen ha sido rotada!', '$'
MST15 DB 'La imagen ha sido invertida horizontalmente!', '$'
MST16 DB 'La imagen ha sido invertida verticalmente!', '$'
MST_NOT_FOUND DB 'El archivo ier no existe en el directorio del programa', '$'
MST_NOT_SAVE DB 'Error al guardar. Asegurate de escribir un nombre valido', '$'
MST_IMAGEN_GUARDADA DB 'Imagen Guardada Correctamente!', '$'
MST_USER_INPUT DB 'Escribe 8 caracteres para el nombre del archivo -> ', '$'
LOADING DB 'Un momento, cargando...', '$'
GATON_IMG DB 'GATON.IER', 0H
BTN_CARGAR DB 'CARGAR.IER', 0H ;CODIGO 1
BTN_GUARDAR DB 'GUARDAR.IER', 0H ;CODIGO 2
;BTN_INVERI DB 'INVERI.IER', 0H ; CODIGO 3
BTN_INVERH DB 'INVERH.IER', 0H ;CODIGO 3
BTN_INVERC DB 'INVERC.IER', 0H ; CODIGO 4
BTN_ROTAR DB 'ROTAR.IER', 0H ;CODIGO 5
BTN_INVERV DB 'INVERV.IER', 0H ;CODIGO 9
;BTN_ABRIR DB 'ABRIR.IER', 0H ;CODIGO 6
BTN_IMGC DB 'IMGC.IER', 0H ;CODIGO 7
BTN_IMGN DB 'IMGN.IER', 0H ;CODIGO 8
GATOC_IMG DB 'land.IER', 0H
TITU_LB DB 'TITU.IER', 0H
DUMMY_IER DB 'DUMMY.IER', 0H
DUMMY_2_IER DB 'DUMMY2.IER', 0H
SELECT_IMG_PTR DW 0FFFH
PTR_PATH DW ?
HANDLE DW ?
HANDLE_COPY DW ?
HANDLE_DUMMY DW ?
BUFFER DB 0H
CLICK DB 0H
MAX_W DW 0H
MAX_H DW 0H
COLOR DB 0H
PTR_PTR DB ?
FONDO DB 'FONDO.IER', 0H
SUM DW 0H

.CODE
	MOV AX, @DATA
	MOV DS, AX
	
	MAIN:
		MOV AL, 12H
		MOV AH, 00H
		INT 10H ; MODO GRAFICO 640X480
		DRAW_IMG_M FONDO, 0D, 0D
		IMP_TEXTO LOADING
		DRAW_IMG_M BTN_INVERC, 423D, 30D
		DRAW_IMG_M BTN_CARGAR, 423D, 90D
		DRAW_IMG_M BTN_ROTAR, 423D, 150D
		;DRAW_IMG_M BTN_INVERI, 423D, 210D
		DRAW_IMG_M BTN_INVERH, 423D, 210D
		DRAW_IMG_M BTN_INVERV, 423D, 270D
		DRAW_IMG_M BTN_GUARDAR, 423D, 330D
		DRAW_IMG_M BTN_IMGC, 30D, 390D
		DRAW_IMG_M BTN_IMGN, 30D, 430D
		DRAW_IMG_M TITU_LB, 156D, 34D
		DRAW_RECT_M 28D, 58D, 303D, 303D, 09H
		CLEAR_TEXT

		
		
		MOV AX, 0H ;CODIGO DEL MOUSE
		INT 33H
		MOV AX, 01H
		INT 33H
		WAIT_FOR_MOUSE:
			MOV AX, 03H
			XOR BX, BX
			INT 33H
			CMP BX, 1H
			JE MOUSE_CLICKED
			JMP WAIT_FOR_MOUSE
		WAIT_FOR_MOUSE_UP:
			MOV AX, 03H
			XOR BX, BX
			INT 33H
			CMP BX, 0H
			JE WAIT_FOR_MOUSE
			JMP WAIT_FOR_MOUSE_UP
		MOUSE_CLICKED:
			CALL CHECK_BTNS
			CMP CLICK, 01D
			JE BTN_LOAD_SISTEM_ET
			CMP CLICK, 02D
			JE BTN_GUARDAR_ET
			CMP CLICK, 03D
			JE BTN_INVERH_ET
			CMP CLICK, 04D
			JE BTN_INVERC_ET
			CMP CLICK, 05D
			JE BTN_ROTAR_ET
			CMP CLICK, 07D
			JE BTN_IMGC_ET
			CMP CLICK, 08D
			JE BTN_IMGN_ET
			CMP CLICK, 09D
			JE BTN_INVERV_ET
			
			JMP WAIT_FOR_MOUSE_UP ;NO SE TOCA ES EL FINAL
			
			BTN_LOAD_SISTEM_ET:
				CALL BTN_LOAD_SISTEM
				JMP WAIT_FOR_MOUSE_UP

			BTN_INVERH_ET:
				CALL INVERTIR_HORIZONTAL_PROC
				JMP WAIT_FOR_MOUSE_UP
			
			BTN_ROTAR_ET:
				CALL ROTAR_PROC
				JMP WAIT_FOR_MOUSE_UP
			
			BTN_GUARDAR_ET:
				CALL BTN_GUARDAR_PROC
				JMP WAIT_FOR_MOUSE_UP
			
			BTN_INVERC_ET:
				CALL INVERTIR_COLORES
				JMP WAIT_FOR_MOUSE_UP

			BTN_INVERV_ET:
				CALL INVERTIR_VERTICAL_PROC
				JMP WAIT_FOR_MOUSE_UP
				
			BTN_IMGC_ET:
				CALL BTN_IMGC_PROC
				JMP WAIT_FOR_MOUSE_UP
				
			BTN_IMGN_ET:
				CALL BTN_IMGN_PROC
				JMP WAIT_FOR_MOUSE_UP

		FIN:
			MOV AH, 7H ;ESPERAR
			INT 21H
		JMP TERMINATE
	
	BTN_IMGN_PROC PROC
		IMP_TEXTO LOADING
		MOV AX, OFFSET GATON_IMG
		MOV SELECT_IMG_PTR, AX
		CALL BTN_CARGAR_PROC
		IMP_TEXTO MST9
		RET
	ENDP
	
	ROTAR_PROC PROC
		CMP SELECT_IMG_PTR, 0FFFH ;SI YA SE CARGO ALGUNA IMAGEN CONTINUO SI NO AVISO ERROR AL USUARIO
		JNE RO_CONTINUE
		IMP_TEXTO MST10
		RET
		
		RO_CONTINUE: ;inicio de contador de ancho y largo
			IMP_TEXTO LOADING
			MOV CNT_X, 0H
			MOV CNT_Y, 0H
			MOV MAX_H, 0H
			MOV MAX_W, 0H
			OPEN_FILE DUMMY_IER, HANDLE
		RO_CONTW_LOOP:
			READ_FROM_FILE HANDLE, BUFFER
			CMP [BUFFER], '@'
			JE RO_CONTW_LOOP_OUT
			INC MAX_W
			JMP RO_CONTW_LOOP
		RO_CONTW_LOOP_OUT:
		INC MAX_H
		RO_CONTH_LOOP:
			READ_FROM_FILE HANDLE, BUFFER
			CMP [BUFFER], '%'
			JE RO_CONTH_LOOP_OUT
			CMP [BUFFER], '@'
			JNE RO_CONTH_LOOP
			INC MAX_H
			JMP RO_CONTH_LOOP
		RO_CONTH_LOOP_OUT: ;fin de contador de ancho y largo
		MOV AH, 3CH
		MOV DX, OFFSET DUMMY_2_IER
		MOV CX, 03H
		INT 21H ;CREAR EL ARCHIVO Y SI YA EXISTE BORRA SU CONTENIDO
		MOV HANDLE_DUMMY, AX
		RO_PROCESS_LOOP: ; se repite n veces donde n = alto
			MOV DX, -02D
			SUB DX, MAX_W
			ADD DX, CNT_X
			SET_FILE_POSITION HANDLE, 02H, -1D, DX
				RO_COLUMN_LOOP:
					READ_FROM_FILE HANDLE, BUFFER
					WRITE_TO_FILE HANDLE_DUMMY, BUFFER
					;MOV AL, [BUFFER]
					;MOV [PRUEBA_TXT], AL
					;IMP_TEXTO PRUEBA_TXT
					;MOV AH, 01H
					;INT 21H
					INC CNT_Y
					MOV DX, -02D ;-2
					SUB DX, MAX_W
					SET_FILE_POSITION HANDLE, 01H, -1D, DX ;se mueve para atras lo mismo que su ancho mas 2
					MOV AX, MAX_H
					CMP CNT_Y, AX
					JE RO_NEW_ROW
					JMP RO_COLUMN_LOOP
					RO_NEW_ROW:
						MOV CNT_Y, 0H
						MOV [BUFFER], '@'
						WRITE_TO_FILE HANDLE_DUMMY, BUFFER
						INC CNT_X
						MOV DX, MAX_W
						ADD DX, 00D
						CMP CNT_X, DX
						JE RO_PROCESS_LOOP_OUT
						JMP RO_PROCESS_LOOP
		RO_PROCESS_LOOP_OUT:
		MOV [BUFFER], '%'
		WRITE_TO_FILE HANDLE_DUMMY, BUFFER
		CLOSE_FILE HANDLE_DUMMY
		CLOSE_FILE HANDLE
		MOV DX, OFFSET DUMMY_2_IER
		LOAD_DUMMY_M DX
		DRAW_RECT_M 28D, 58D, 303D, 303D, 09H
		DRAW_IMG_M DUMMY_IER, 30D, 60D 
		IMP_TEXTO MST14
		RET
	ENDP
	
	INVERTIR_HORIZONTAL_PROC PROC
	
		CMP SELECT_IMG_PTR, 0FFFH ;SI YA SE CARGO ALGUNA IMAGEN CONTINUO SI NO AVISO ERROR AL USUARIO
		JNE IH_CONTINUE
		IMP_TEXTO MST10
		RET
		
		IH_CONTINUE:
			IMP_TEXTO LOADING
			MOV CNT_X, 0H
			MOV CNT_Y, 0H
			MOV MAX_H, 0H
			MOV MAX_W, 0H
			OPEN_FILE DUMMY_IER, HANDLE
		IH_CONTW_LOOP:
			READ_FROM_FILE HANDLE, BUFFER
			CMP [BUFFER], '@'
			JE IH_CONTW_LOOP_OUT
			INC MAX_W
			JMP IH_CONTW_LOOP
		IH_CONTW_LOOP_OUT:
		INC MAX_H
		IH_CONTH_LOOP:
			READ_FROM_FILE HANDLE, BUFFER
			CMP [BUFFER], '%'
			JE IH_CONTH_LOOP_OUT
			CMP [BUFFER], '@'
			JNE IH_CONTH_LOOP
			INC MAX_H
			JMP IH_CONTH_LOOP
		IH_CONTH_LOOP_OUT:
		MOV AH, 3CH
		MOV DX, OFFSET DUMMY_2_IER
		MOV CX, 03H
		INT 21H ;CREAR EL ARCHIVO Y SI YA EXISTE BORRA SU CONTENIDO
		MOV HANDLE_DUMMY, AX
		MOV CNT_Y, 0H
		MOV CNT_X, 0H
		MOV DX, MAX_W
		MOV SUM, DX
		SUB SUM, 01D
		SET_FILE_POSITION HANDLE, 0H, 0000, SUM
		IH_PROCESS_LOOP:
			READ_FROM_FILE HANDLE, BUFFER
			WRITE_TO_FILE HANDLE_DUMMY, BUFFER
			;MOV AL, [BUFFER]
			;MOV [PRUEBA_TXT], AL
			;IMP_TEXTO PRUEBA_TXT
			;MOV AH, 01H
			;INT 21H
			;MOV CHAR, AL
			INC CNT_X
			XOR DX, DX
			MOV DX, CNT_X
			CMP MAX_W, DX
			JE IH_NEW_ROW
			SET_FILE_POSITION HANDLE, 01H, -1D, -02D ;
			JMP IH_PROCESS_LOOP
			IH_NEW_ROW:
				MOV CNT_X, 0H
				XOR DX, DX
				MOV DX, MAX_W
				MOV SUM, DX
				ADD SUM, DX
				SUB SUM, 01H
				SET_FILE_POSITION HANDLE, 01H, 0000, SUM
				MOV [BUFFER], '@'
				WRITE_TO_FILE HANDLE_DUMMY, BUFFER
				INC CNT_Y
				XOR BX, BX
				MOV BX, CNT_Y
				CMP BX, MAX_H
				JE IH_PROCESS_LOOP_OUT
				MOV CNT_X, 0H
				JMP IH_PROCESS_LOOP
		IH_PROCESS_LOOP_OUT:
		MOV [BUFFER], '%'
		WRITE_TO_FILE HANDLE_DUMMY, BUFFER
		CLOSE_FILE HANDLE_DUMMY
		CLOSE_FILE HANDLE
		MOV DX, OFFSET DUMMY_2_IER
		LOAD_DUMMY_M DX
		DRAW_IMG_M DUMMY_IER, 30D, 60D 
		IMP_TEXTO MST15
		RET
	ENDP
	
	INVERTIR_VERTICAL_PROC PROC
	
		CMP SELECT_IMG_PTR, 0FFFH ;SI YA SE CARGO ALGUNA IMAGEN CONTINUO SI NO AVISO ERROR AL USUARIO
		JNE IV_CONTINUE
		IMP_TEXTO MST10
		RET
		
		IV_CONTINUE:
			IMP_TEXTO LOADING
			MOV CNT_X, 0H
			MOV CNT_Y, 0H
			MOV MAX_H, 0H
			MOV MAX_W, 0H
			OPEN_FILE DUMMY_IER, HANDLE
		IV_CONTW_LOOP:
			READ_FROM_FILE HANDLE, BUFFER
			CMP [BUFFER], '@'
			JE IV_CONTW_LOOP_OUT
			INC MAX_W
			JMP IV_CONTW_LOOP
		IV_CONTW_LOOP_OUT:
		INC MAX_H
		IV_CONTH_LOOP:
			READ_FROM_FILE HANDLE, BUFFER
			CMP [BUFFER], '%'
			JE IV_CONTH_LOOP_OUT
			CMP [BUFFER], '@'
			JNE IV_CONTH_LOOP
			INC MAX_H
			JMP IV_CONTH_LOOP
		IV_CONTH_LOOP_OUT:
		MOV AH, 3CH
		MOV DX, OFFSET DUMMY_2_IER
		MOV CX, 03H
		INT 21H ;CREAR EL ARCHIVO Y SI YA EXISTE BORRA SU CONTENIDO
		MOV HANDLE_DUMMY, AX
		MOV CNT_Y, 0H
		MOV CNT_X, 0H
		MOV DX, 0H
		SUB DX, MAX_W
		MOV SUM, DX
		SUB SUM, 02D
		SET_FILE_POSITION HANDLE, 2H, -1D, SUM
		IV_PROCESS_LOOP:
			READ_FROM_FILE HANDLE, BUFFER
			WRITE_TO_FILE HANDLE_DUMMY, BUFFER
			;MOV AL, [BUFFER]
			;MOV [PRUEBA_TXT], AL
			;IMP_TEXTO PRUEBA_TXT
			;MOV AH, 01H
			;INT 21H
			;MOV CHAR, AL
			INC CNT_X
			XOR DX, DX
			MOV DX, CNT_X
			CMP MAX_W, DX
			JE IV_NEW_ROW
			JMP IV_PROCESS_LOOP
			IV_NEW_ROW:
				MOV CNT_X, 0H
				XOR BX, BX
				MOV BX, MAX_W
				ADD BX, MAX_W
				ADD BX, 01D
				XOR DX, DX
				SUB DX, BX
				SET_FILE_POSITION HANDLE, 01H, -01D, DX
				MOV [BUFFER], '@'
				WRITE_TO_FILE HANDLE_DUMMY, BUFFER
				INC CNT_Y
				XOR BX, BX
				MOV BX, CNT_Y
				CMP BX, MAX_H
				JE IV_PROCESS_LOOP_OUT
				MOV CNT_X, 0H
				JMP IV_PROCESS_LOOP
		IV_PROCESS_LOOP_OUT:
		MOV [BUFFER], '%'
		WRITE_TO_FILE HANDLE_DUMMY, BUFFER
		CLOSE_FILE HANDLE_DUMMY
		CLOSE_FILE HANDLE
		MOV DX, OFFSET DUMMY_2_IER
		LOAD_DUMMY_M DX
		DRAW_IMG_M DUMMY_IER, 30D, 60D 
		IMP_TEXTO MST16
		RET
	ENDP
	
	ENDP
	
	BTN_LOAD_SISTEM PROC
	
	DRAW_RECT_M 0D, 0D, 640D, 20D, 08H
	DRAW_RECT_M 0D, 0D, 480D, 20D, 0H
	MOV AH, 02H
	MOV BH, 00H
	MOV DH, 0D
	MOV DL, 0D
	INT 10H
	MOV AH, 09H              ; SERVICIO DE IMPRESION
	LEA DX, MST_USER_INPUT             ; OBTIENE LA DIRECCION DE MSG
	INT 21H 
	CALL TEXT_BOX
	MOV AH, 3DH 		;PETICION PARA ABRIR
	MOV AL, 02 			;LECTURA Y ESCRITURA
	MOV DX, OFFSET SAVE_PATH 	 ;CADENA ASCIIZ
	INT 21H 			;LLAMA INT
	JC NOT_FOUND
	MOV HANDLE, AX
	CALL CLOSEF
	MOV AX, OFFSET SAVE_PATH
	MOV SELECT_IMG_PTR, AX
	CALL BTN_CARGAR_PROC
	IMP_TEXTO MST13
	RET
	NOT_FOUND:
	IMP_TEXTO MST_NOT_FOUND
	RET
	ENDP 
	
	BTN_GUARDAR_PROC PROC
		
		DRAW_RECT_M 0D, 0D, 640D, 20D, 08H
		DRAW_RECT_M 0D, 0D, 480D, 20D, 0H
		MOV AH, 02H
		MOV BH, 00H
		MOV DH, 0D
		MOV DL, 0D
		INT 10H
		MOV AH, 09H              ; SERVICIO DE IMPRESION
		LEA DX, MST_USER_INPUT             ; OBTIENE LA DIRECCION DE MSG
		INT 21H 
		CALL TEXT_BOX
		MOV AH, 3CH
		MOV DX, OFFSET SAVE_PATH
		MOV CX, 03H
		INT 21H ;CREAR EL ARCHIVO
		JNC BTN_GUARDAR_CONTINUE
		JMP ERROR_SAVE
		BTN_GUARDAR_CONTINUE:
		OPEN_FILE SAVE_PATH, HANDLE_COPY ; EL ARCHIVO NUEVO
		MOV AX, OFFSET DUMMY_IER ; GUARDA LA IMAGEN EN CACHE QUE SE ESTA EDITANDO
		MOV PTR_PATH, AX
		CALL OPENF ; se abre el archivo 
		BTN_GUARDAR_LOOP:
		READ_FROM_FILE HANDLE, BUFFER ; VA COPIAR TODO EL CONTENIDO DE LA IMAGEN EN CACHE A EL ARCHIVO GUARDADO
		WRITE_TO_FILE HANDLE_COPY, BUFFER
		CMP [BUFFER], '%'
		JE BTN_GUARDAR_OUT
		JMP BTN_GUARDAR_LOOP
		BTN_GUARDAR_OUT:
		CLOSE_FILE HANDLE
		CLOSE_FILE HANDLE_COPY
		IMP_TEXTO MST_IMAGEN_GUARDADA
		BTN_GUARDAR_PROC_OUT:
		RET
		
		ERROR_SAVE:
		IMP_TEXTO MST_NOT_SAVE
	ENDP
	
	BTN_IMGC_PROC PROC
		IMP_TEXTO LOADING
		MOV AX, OFFSET GATOC_IMG
		MOV SELECT_IMG_PTR, AX
		CALL BTN_CARGAR_PROC
		IMP_TEXTO MST8
		RET
	ENDP
	
	
	BTN_CARGAR_PROC PROC
		CMP SELECT_IMG_PTR, 0FFFH
		JE ERROR1
		LOAD_DUMMY_M SELECT_IMG_PTR
		DRAW_IMG_M DUMMY_IER, 30D, 60D 
		RET
		ERROR1:
			IMP_TEXTO MST10
		RET
	ENDP
	
	CHECK_BTNS PROC
		MOV CLICK, 00H
		;BOTON DE CARGAR
	BT1:ON_CLICK_M 423D, 90D, 150D, 36D
		CMP CLICK, 1B
		JNE BT2
		MOV CLICK, 01D
		RET
		;BOTON DE INVERTIR HORIZONTAL
	BT2:ON_CLICK_M 423D, 210D, 149D, 36D
		CMP CLICK, 1B
		JNE BT3
		MOV CLICK, 03D
		RET

		;BOTON DE ROTAR
	BT3:ON_CLICK_M 423D, 150D, 150D, 36D
		CMP CLICK, 1B
		JNE BT5
		MOV CLICK, 05D
		RET
		
;		;BOTON DE ABRIR
;	BT4:ON_CLICK_M 423D, 330D, 138D, 41D
;		CMP CLICK, 1B
;		JNE BT5
;		MOV CLICK, 06D
;		RET
		
		;BOTON DE GUARDAR
	BT5:ON_CLICK_M 423D, 330D, 150D, 36D
		CMP CLICK, 1B
		JNE BT6
		MOV CLICK, 02D
		RET
		
		
		;BOTON DE INVERTIR COLOR
	BT6:ON_CLICK_M 423D, 30D, 150D, 36D
		CMP CLICK, 1B
		JNE BT7
		MOV CLICK, 04D
		RET

		
	BT7:ON_CLICK_M 30D, 390D, 68D, 25D
		CMP CLICK, 1B
		JNE BT8
		MOV CLICK, 07D
		RET
		
	BT8:ON_CLICK_M 30D, 430D, 68D, 25D
		CMP CLICK, 1B
		JNE BT9
		MOV CLICK, 08D
		RET

		;BOTON DE INVERTIR VERTICAL  423D, 270D
	BT9:ON_CLICK_M 423D, 270D, 150D, 36D
		CMP CLICK, 1B
		JNE CHECK_BTNS_OUT
		MOV CLICK, 09D
		RET

	CHECK_BTNS_OUT:
	MOV CLICK, 00H
	RET
	ENDP

	TEXT_BOX PROC
		MOV CONT_CHAR, 0H
		MOV DI, OFFSET SAVE_PATH
		CLEAN_SAVE_PATH:
		MOV Al, 0H
		MOV [DI], Al
		INC CONT_CHAR
		INC DI
		CMP CONT_CHAR, 14D
		JE CLEAN_SAVE_PATH_OUT
		JMP CLEAN_SAVE_PATH
		CLEAN_SAVE_PATH_OUT:
		MOV CONT_CHAR, 0H
		MOV DI, OFFSET SAVE_PATH
		TEXT_BOX_LOOP:
		XOR AX, AX
		MOV AH, 01H
		INT 21H
		CMP AL, 13D
		JE TEXT_BOX_OUT
		MOV [DI], AL
		INC CONT_CHAR
		INC DI
		CMP CONT_CHAR, 8D
		JE TEXT_BOX_OUT
		JMP TEXT_BOX_LOOP
		TEXT_BOX_OUT:
		IMP_TEXTO LOADING
		MOV AL, '.'
		MOV [DI], AL
		INC DI
		MOV AL, 'I'
		MOV [DI], AL
		INC DI
		MOV AL, 'E'
		MOV [DI], AL
		INC DI
		MOV AL, 'R'
		MOV [DI], AL
		RET
	ENDP

	
	LOAD_DUMMY PROC
		MOV AH, 3CH
		MOV DX, OFFSET DUMMY_IER
		MOV CX, 03H
		INT 21H ;CREAR EL ARCHIVO Y BORRA SU CONTENIDO
		MOV HANDLE_DUMMY, AX
		OPEN_FILE_PTR PTR_PATH, HANDLE
		LOAD_DUMMY_LOOP:
		READ_FROM_FILE HANDLE, BUFFER
		WRITE_TO_FILE HANDLE_DUMMY, BUFFER
		CMP [BUFFER], '%'
		JE LOAD_DUMMY_OUT
		JMP LOAD_DUMMY_LOOP
		LOAD_DUMMY_OUT:
		CLOSE_FILE HANDLE
		CLOSE_FILE HANDLE_DUMMY
		RET
	ENDP

	
	INVERTIR_COLORES PROC
		CMP SELECT_IMG_PTR, 0FFFH ;SI YA SE CARGO ALGUNA IMAGEN CONTINUO SI NO AVISO ERROR AL USUARIO
		JNE IC_CONTINUE
		IMP_TEXTO MST10
		RET
		
		IC_CONTINUE:
		IMP_TEXTO LOADING
		MOV AX, OFFSET DUMMY_IER
		MOV PTR_PATH, AX
		CALL OPENF ; se abre el archivo 
		
		INVERTIR_COLORES_LOOP: ;aca basiamente es lo que esta en el enunciado, se revisa el caracter leido y se lo cambia por su inverso
			CALL READ ;el caracter leido se guarda en buffer y se accede a el con []
				IC0:CMP [BUFFER], '0'
					JNE IC1
					MOV [BUFFER], 'F' 
					JMP IC_WRITE
				IC1:CMP [BUFFER], '1'
					JNE IC2
					MOV [BUFFER], 'E'
					JMP IC_WRITE
				IC2:CMP [BUFFER], '2'
					JNE IC3
					MOV [BUFFER], 'D'
					JMP IC_WRITE
				IC3:CMP [BUFFER], '3'
					JNE IC4
					MOV [BUFFER], 'C'
					JMP IC_WRITE
				IC4:CMP [BUFFER], '4'
					JNE IC5
					MOV [BUFFER], 'B'
					JMP IC_WRITE
				IC5:CMP [BUFFER], '5'
					JNE IC6
					MOV [BUFFER], 'A'
					JMP IC_WRITE
				IC6:CMP [BUFFER], '6'
					JNE IC7
					MOV [BUFFER], '9'
					JMP IC_WRITE
				IC7:CMP [BUFFER], '7'
					JNE IC8
					MOV [BUFFER], '8'
					JMP IC_WRITE
				IC8:CMP [BUFFER], '8'
					JNE IC9
					MOV [BUFFER], '7'
					JMP IC_WRITE
				IC9:CMP [BUFFER], '9'
					JNE ICA
					MOV [BUFFER], '6'
					JMP IC_WRITE
				ICA:CMP [BUFFER], 'A'
					JNE ICB
					MOV [BUFFER], '5'
					JMP IC_WRITE
				ICB:CMP [BUFFER], 'B'
					JNE ICC
					MOV [BUFFER], '4'
					JMP IC_WRITE
				ICC:CMP [BUFFER], 'C'
					JNE ICD
					MOV [BUFFER], '3'	
					JMP IC_WRITE
				ICD:CMP [BUFFER], 'D'
					JNE ICE
					MOV [BUFFER], '2'
					JMP IC_WRITE
				ICE:CMP [BUFFER], 'E'
					JNE ICF
					MOV [BUFFER], '1'
					JMP IC_WRITE
				ICF:CMP [BUFFER], 'F'
					JNE IC_AROBA
					MOV [BUFFER], '0'
					JMP IC_WRITE
			IC_AROBA:CMP [BUFFER], '@' ;si es un arroba no lo vamos a tomar encuenta y volvemos a empezar el loop
					JNE IC_IS_END 
					JMP INVERTIR_COLORES_LOOP
					IC_IS_END: ; si el ensamblador llega aca es que el caracter leido es '%' que significa fin de archivo
						JMP INVERTIR_COLORES_OUT ;termina el proc
		IC_WRITE: ;ya que cambiamos el caracter leido, y lo cambiamos a su inverso, vamos a editarlo dentro del archivo .ier como tal
			MOV AH, 42H ;vamos a usar la int 21.42 que nos permite posicionar el cursor dentro del archivo, como anteriormente habiamos leido un caracter, el cursor se movio un espacio, entonces, hay que moverlo de nuevo pero esta vez para atras, osea a la posicion en donde esta el caracter que habiamos leido anteriormente.
			MOV AL, 01H ;aca le dicimos que se mueva desde donde esta 'n' mas lo que hay en CX osea se movera a n-1
			MOV BX, HANDLE ;este es nuestro archivo
			MOV CX, -1D ;como se dijo anteriormente se movera el cursor un espacio hacia atras
			MOV DX, -1D
			INT 21H ;entonces como leimos antes ahora nos movemos para atras para poder cambiar ese caracter
			MOV AH, 40H ; int 21.40 nos permite escribir en el archivo
			MOV BX, HANDLE
			MOV CX, 01H ;aca le estamos diciendo que solo escriba una vez
			MOV DX, OFFSET BUFFER ; aca es donde tenemos el caracter que habiamos invertido, esto es lo que vamos a escribir dentro del archivo
			INT 21H
			JMP INVERTIR_COLORES_LOOP ; y se repite todo hasta que encuentre un '%'
		
		INVERTIR_COLORES_OUT:
			CALL CLOSEF
			DRAW_IMG_M DUMMY_IER, 30D, 60D 
			IMP_TEXTO MST11
		RET
	ENDP
	
	;READ_KEYBOARD PROC 
	;	XOR AX, AX
	;	MOV AH, 01H
	;	INT 21H
	;	MOV CHAR, AL
	;	RET
	;READ_KEYBOARD ENDP


	OPENF PROC
		MOV AH, 3DH 		;PETICION PARA ABRIR
		MOV AL, 02 			;LECTURA Y ESCRITURA
		MOV DX, PTR_PATH 	 ;CADENA ASCIIZ
		INT 21H 			;LLAMA AL DOS
		MOV HANDLE, AX 		;GUARDA 
		RET
	OPENF ENDP
	
	READ PROC ;LEE UN CARACTER NADA MAS
		MOV AH, 3FH 		;PETICION DE LECTURA DE REGISTRO
		MOV BX, HANDLE 		;MANEJADOR DE ARVHIVOS
		MOV CX, 1H 		;CANTIDAD DE BYTES A LEER
		LEA DX, BUFFER 		;DIRECCION DEL AREA DE ENTRADA
		INT 21H
		RET
	READ ENDP
	
	DRAW_IMG PROC 
		MOV CX, COORX
		MOV DX, COORY
		MOV CNT_X, CX
		MOV CNT_Y, DX
		CALL OPENF

			N_P: ;NEW PIXEL
				CALL READ
				CMP [BUFFER], '%'
				JE OUT_DRAW_IMG
				CMP [BUFFER], '@'
				JE N_R
				MOV AL, [BUFFER]
				GETCOLOR:
					CMP AL, '9' ;if(color>57) { color+9 } else { //do nothing }
					JG LETTER ; jump greater
					JMP OUT_GETCOLOR
					LETTER:
						ADD AL, 9D
				OUT_GETCOLOR:
				PIX CNT_X, CNT_Y
				INC CNT_X
				JMP N_P
			N_R: ;NEW ROW
				INC CNT_Y
				MOV CX, COORX
				MOV CNT_X, CX
				JMP N_P	
			OUT_DRAW_IMG: 
				CALL CLOSEF
		RET
	DRAW_IMG ENDP
	
	
	
	ON_CLICK PROC ;MAX_W, MAX_H, COORX, COORY
		MOV AX, 05H
		MOV BX, 0H
		INT 33H ; CX==XPOS || DX==YPOS
		CMP CX, COORX
		JNGE NO_CLICK
		MOV AX, COORX
		ADD AX, MAX_W
		CMP CX, AX
		JNLE NO_CLICK
		CMP DX, COORY 
		JNGE NO_CLICK
		MOV AX, COORY
		ADD AX, MAX_H
		CMP DX, AX
		JNLE NO_CLICK
		JMP YES_CLICK ; if(mousex>=coorx && mousex<=coorx+max_w && mousey>=coory && mousey<=coory+max_h) { click= 1} else { click= 0}
		
		
		NO_CLICK:
			MOV CLICK, 0B
			JMP OUT_ON_CLICK
		YES_CLICK:
			MOV CLICK, 1B
		OUT_ON_CLICK:
		RET
	ON_CLICK ENDP
	
	CLOSEF PROC
		MOV AH, 3EH			;PETICION PARA CERRAR
		MOV DX, HANDLE		;EL ARCHIVO
		INT 21H
		RET
	CLOSEF ENDP
	
	DRAW_RECT PROC
		MOV CX, COORX
		MOV DX, COORY
		MOV CNT_X, CX
		MOV CNT_Y, DX
		
		RECT:
			MOV CX, CNT_X ; COORDENADA X
			MOV DX, CNT_Y ; COORDENADA Y
			
			MOV AL, COLOR ; COLOR
			MOV BH, 0H
			MOV AH, 0CH
			INT 10H
			
			MOV AX, COORX ;150
			ADD AX, MAX_W ; sum==150 + (maxw==30) || 150+30= 180 => sum==180
			CMP AX, CNT_X ; CONTX == 170 { PASE A LA SIGUIENTE FILA }
			JE NEW_ROW
			INC CNT_X
			JMP RECT
		
		NEW_ROW:
			MOV AX, COORY 
			ADD AX, MAX_H ; sum==200 + (maxh==20) || 200+20= 220 => sum==220
			CMP AX, CNT_Y ; CONTY == 220 { ya termino de dibujar el rectangulo }
			JE OUT_DRAW_RECT
			INC CNT_Y
			MOV AX, COORX
			MOV CNT_X, AX ;
			JMP RECT 
			
		OUT_DRAW_RECT:
		
		RET
	DRAW_RECT ENDP
	


	TERMINATE:
		MOV AH, 4CH
		MOV AL, 0H;
		INT 21H
		
END